from importlib.resources import path
from multiprocessing.sharedctypes import Value
from re import L
from tkinter.ttk import Entry
from unittest.util import three_way_cmp
import copy
from classes import DEPTH_COEFF, HORIZONAL_COEFF, VERTICAL_COEFF, EntryOrientation, Graph, Rack
from location import RackLayout
# AISLE-1 CODE: A
# racks on one side of AISLE-1
rack1 = Rack('A1', RackLayout(1, 4, 3).createMesh(), [])  
rack2 = Rack('A2', RackLayout(1, 4, 3).createMesh(), []) 
rack3 = Rack('A3', RackLayout(1, 4, 3).createMesh(), [])
rack4 = Rack('A4', RackLayout(1, 4, 3).createMesh(), [])
rack5 = Rack('A5', RackLayout(1, 4, 3).createMesh(), [])
rack6 = Rack('A6', RackLayout(1, 4, 3).createMesh(), [])
rack7 = Rack('A7', RackLayout(1, 4, 3).createMesh(), [])
# racks on other side of AISLE-1, rack1 is connected to rack8. rack7 is connected to rack14
rack8 = Rack('A8', RackLayout(1, 4, 3).createMesh(), [])  
rack9 = Rack('A9', RackLayout(1, 4, 3).createMesh(), []) 
rack10 = Rack('A10', RackLayout(1, 4, 3).createMesh(), [])
rack11 = Rack('A11', RackLayout(1, 4, 3).createMesh(), [])
rack12 = Rack('A12', RackLayout(1, 4, 3).createMesh(), [])
rack13 = Rack('A13', RackLayout(1, 4, 3).createMesh(), [])
rack14 = Rack('A14', RackLayout(1, 4, 3).createMesh(), [])

# AISLE-2 CODE: B
# racks on one side of AISLE-2
rack15 = Rack('B15', RackLayout(1, 4, 3).createMesh(), [])
rack16 = Rack('B16', RackLayout(1, 4, 3).createMesh(), []) 
rack17 = Rack('B17', RackLayout(1, 4, 3).createMesh(), [])
rack18 = Rack('B18', RackLayout(1, 4, 3).createMesh(), [])
rack19 = Rack('B19', RackLayout(1, 4, 3).createMesh(), [])
rack20 = Rack('B20', RackLayout(1, 4, 3).createMesh(), [])
rack21 = Rack('B21', RackLayout(1, 4, 3).createMesh(), [])
# racks on other side of AISLE-2
rack22 = Rack('B22', RackLayout(1, 4, 3).createMesh(), [])
rack23 = Rack('B23', RackLayout(1, 4, 3).createMesh(), []) 
rack24 = Rack('B24', RackLayout(1, 4, 3).createMesh(), [])
rack25 = Rack('B25', RackLayout(1, 4, 3).createMesh(), [])
rack26 = Rack('B26', RackLayout(1, 4, 3).createMesh(), [])
rack27 = Rack('B27', RackLayout(1, 4, 3).createMesh(), [])
rack28 = Rack('B28', RackLayout(1, 4, 3).createMesh(), [])


g = Graph()

# AISLE - 1 racks
g.add_rack(rack1)
g.add_rack(rack2)
g.add_rack(rack3)
g.add_rack(rack4)
g.add_rack(rack5)
g.add_rack(rack6)
g.add_rack(rack7)
g.add_rack(rack8)
g.add_rack(rack9)
g.add_rack(rack10)
g.add_rack(rack11)
g.add_rack(rack12)
g.add_rack(rack13)
g.add_rack(rack14)
# AISLE - 2 racks
g.add_rack(rack15)
g.add_rack(rack16)
g.add_rack(rack17)
g.add_rack(rack18)
g.add_rack(rack19)
g.add_rack(rack20)
g.add_rack(rack21)
g.add_rack(rack22)
g.add_rack(rack23)
g.add_rack(rack24)
g.add_rack(rack25)
g.add_rack(rack26)
g.add_rack(rack27)
g.add_rack(rack28)


# edges connecting two sides of the aisle
# g.add_edge(rack1, rack8, 2) # connecting two sides of the aisle from top
# g.add_edge(rack7, rack14, 2) # connecting two sides of the aisle from bottom

# all weight 1 and 2 circular edges in AISLE-1
g.add_edge(rack1, rack2, 1)
g.add_edge(rack2, rack3, 1)
g.add_edge(rack3, rack4, 1)
g.add_edge(rack4, rack5, 1)
g.add_edge(rack5, rack6, 1)
g.add_edge(rack6, rack7, 1)
g.add_edge(rack7, rack8, 2) # connecting opposite sites of the aisle at the end of row containg racks 1 to 7. 7 -> 8 
g.add_edge(rack8, rack9, 1)
g.add_edge(rack9, rack10, 1)
g.add_edge(rack10, rack11, 1)
g.add_edge(rack11, rack12, 1)
g.add_edge(rack12, rack13, 1)
g.add_edge(rack13, rack14, 1)
g.add_edge(rack14, rack1, 2) # connecting opposite sides on other end of the aisle
# AISLE - 2 edges 
g.add_edge(rack15, rack16, 1)
g.add_edge(rack16, rack17, 1)
g.add_edge(rack17, rack18, 1)
g.add_edge(rack18, rack19, 1)
g.add_edge(rack19, rack20, 1)
g.add_edge(rack20, rack21, 1)
g.add_edge(rack21, rack22, 2) # connecting opposite sites of the aisle at the end of row containg racks 1 to 7. 7 -> 8 
g.add_edge(rack22, rack23, 1)
g.add_edge(rack23, rack24, 1)
g.add_edge(rack24, rack25, 1)
g.add_edge(rack25, rack26, 1)
g.add_edge(rack26, rack27, 1)
g.add_edge(rack27, rack28, 1)
g.add_edge(rack28, rack15, 2) # connecting opposite sides on other end of the aisle
# AISLE - 1 and AISLE - 2 connections
g.add_edge(rack8, rack21, 3) # connects 1 and 2 from one end 
g.add_edge(rack15, rack14, 3) # connects 1 and 2 from the other end 

# IMP: always assign the edges in a rack circularly covering a column and then changing col using the rack that is closest
# for racks that are not in the same aisle, 
# edge connecting two different aisles

# so everytime i create an aisle of racks, i will create it circularly always starting from the same position and ending 
# at the same position 
# how are we connecting different aisle?
# using a different edge weight 
# if you ever use THAT edge, meaning an edge that has an attribute of connecting two aisles, 



# edges connecting the two sides of racks on the aisle
# g.add_edge(rack1, rack8, 2)
# g.add_edge(rack7, rack14, 2)

for rack in g.racksDict:
    a = (rack.__str__())
    # print(a)
    
rack1.assignSKU(0,1,1,3)
rack1.assignSKU(0,3,2,3)


def cost_to_exit_rack(location, rack, edge_to_exit):
    location_mesh = rack.rackLocations 
    cost = 0
    (d_start,r_start,c_start) = location # the index in the location_mesh we start from 
    
    # possible_exit_idx_1 = location_mesh[0][-1][0] if we are moving out from bottom left
    d1_exit = 0
    r1_exit = len(location_mesh[0]) - 1
    c1_exit = 0
    
    # possible_exit_idx_2 = location_mesh[0][-1][-1] if we are moving out from bottom right
    d2_exit = 0
    r2_exit = len(location_mesh[0]) - 1
    c2_exit = len(location_mesh[0][0]) - 1
    
    if edge_to_exit.type == EntryOrientation.LEFT2RIGHT: # you want to exit from bottom left
        cost = (DEPTH_COEFF*(abs(d1_exit - d_start))) + (HORIZONAL_COEFF*(abs(r1_exit - r_start))) + (VERTICAL_COEFF*(abs(c1_exit - c_start)))
    else: # you want to exit the rack from bottom right
        cost = (DEPTH_COEFF*(abs(d2_exit - d_start))) + (HORIZONAL_COEFF*(abs(r2_exit - r_start))) + (VERTICAL_COEFF*(abs(c2_exit - c_start)))
    
    return cost
       
# loc = (0, 0, 0)
# c = cost_to_exit_rack(loc, rack1, rack1.adjacent[0])
# print(c)

# IMP: this is how indices of all racks will be accessed, you will get a list of indices like ((0,0,0), (0,0,1),.....) for 
# every rack. 

# indices_rack1 = []
# for depth in range(len(rack1.rackLocations)):
#     for row in range(len(rack1.rackLocations[0])):
#         for col in range(len(rack1.rackLocations[0][0])):
#             location_idx = (depth, row, col)
#             indices_rack1.append(location_idx)
# print(indices_rack1)
# loc_to_feed = indices_rack1[4]
# # d = loc_to_feed[0]
# # r = loc_to_feed[1]
# # c = loc_to_feed[2]
# (d,r,c) = loc_to_feed
# print(d,r,c)
            
# any rack.adjacent will contain all edges that are connected to the rack.
# say rack.adjacent = {edge1, edge2}. rack has 2 edges
# these two edges have a from rack and a to rack
# say edge1 = {frm = rack1, to = rack2}, edge2 = {frm = rack2, to = rack1}
# we want to say that if the edge in rack.adjacent is frm the same rack and to some other rack,
# it is of type = R2L
# if the edge in rack.adjacent is to the same rack and from some other rack, then
# it is type = L2R

# the output of this code means A1 and A2 share an edge. which is what we want
#     """edges_rack1 = []
# edges_rack2 = []
# for edge in rack1.adjacent:
#     edges_rack1.append(edge)
# for edge in rack2.adjacent:
#     edges_rack2.append(edge)
    
# for edge1 in edges_rack1:
#     for edge2 in edges_rack2:
#         if edge1 == edge2:
#             print("true")
#         else:
#             print("false")
#     """

# TODO: if edge in A1.adjacent, if type is R->L, 
# then the edge in the adj of the racks that A1 is connected to
# must be L->R

# for edge in rack8.adjacent:
#     print(edge.rack1.UID + " --> " + edge.rack2.UID + " of type " + str(edge.type))
# assignment important A1 -> A8 is RIGHT2LEFT NOW, A1 -> A2 remains LEFTTORIGHT
# you need to make a function which when called on an edge changes its orientation to whateevr you want to
# def changeEdge(edge, frm, to, type):
#     edge.type == type
#     edge.rack1 = frm
#     edge.rack2 = to
    


# for rack in g.racksDict:
#     for edge in rack.adjacent:

# middle_racks_one_side = [rack2, rack3, rack4, rack5, rack6]
# middle_racks_other_side = [rack9, rack10, rack11, rack12, rack13]

# for rack_oneside, racks_otherside in zip(middle_racks_one_side, middle_racks_other_side):
    
#     edges_to_change_1 = []
#     edges_to_change_1.append(rack_oneside.adjacent[0])
    
#     edges_to_change_other_1 = []
#     edges_to_change_other_2 = []
#     edges_to_change_other_1.append(racks_otherside.adjacent[1])
#     edges_to_change_other_2.append(racks_otherside.adjacent[0])
    
#     for edge1, edge2, edge3 in zip(edges_to_change_1, edges_to_change_other_1, edges_to_change_other_2):
#         # print("from " + edge.rack1.UID + " to " + edge.rack2.UID + " of type " + str(edge.type))
#         edge1.changeEdge(edge1.rack2, edge1.rack1, EntryOrientation.RIGHT2LEFT)
#         edge2.changeEdge(edge2.rack1, edge2.rack2, EntryOrientation.RIGHT2LEFT)
#         edge3.changeEdge(edge3.rack2, edge3.rack1, EntryOrientation.LEFT2RIGHT)
#         # print("from " + edge1.rack1.UID + " to " + edge1.rack2.UID + " of type " + str(edge1.type))
       
    
        
# for edge in rack4.adjacent:
#     print(edge.rack1.UID + " ---> " + edge.rack2.UID + ", Type = " + str(edge.type) + ", Weight = " + str(edge.weight))
    

# def distance_frm_to(d1, r1, c1, d2, r2, c2): # location 1 and 2 are slot locations. location1 = (d,r,c)
    
#     rack1 = Rack('A1', RackLayout(0, 4, 3).createMesh(), []) # location 1 will be in some rack 
#     rack2 = Rack('A2', RackLayout(0, 4, 3).createMesh(), []) # location 2 will be in some rack 
    
#     location1 = rack1.rackLocations[d1][r1][c1] # location 1 in rack1
#     location2 = rack2.rackLocations[d2][r2][c2] # location 2 in rack2
    
def dijkstra(graph, start, goal):
    shortest_distance = {} # records the cost to reach that node. Going to be updated as we move along the graph
    track_pred = {} # to keep track of path that has led us to that node, TODO: some logic about the type of edge leading into that node
    seenNodes = set() # to iterate thru the entire graph, racks 
    infinity = float('inf') # to assign initial distances from start node to +infinty
    track_path = [] # going to trace our journey back to source node
    
    for node in graph.racksDict: # racks in the graph
        shortest_distance[node] = infinity # setting the shortest distacne of all nodes from start as inf
    shortest_distance[start] = 0 # the shortest distance of start from start is 0
    
    while len(seenNodes) != len(graph.racksDict): # iterating over racks in the graph
        
        min_dist_node = None # initially there is no min_dist_node from start
        
        for node in graph.racksDict: # this loops just lets us go through the whole graph with a pointer
            if node in seenNodes:
                continue
            if min_dist_node is None:
                min_dist_node = node
            elif shortest_distance[node] < shortest_distance[min_dist_node]:
                min_dist_node = node
           
        # path_options = graph[min_dist_node].items() #path options for a rack, needs to have a child and weight that can be called 
        path_options = min_dist_node.adjList()
        
        for child_node, weight, type in path_options:
            if child_node not in seenNodes and weight + shortest_distance[min_dist_node] < shortest_distance[child_node]:
                shortest_distance[child_node] = weight + shortest_distance[min_dist_node] 
                track_pred[child_node] = min_dist_node # because min dist node has led to the child
                
        seenNodes.add(min_dist_node)
    currentNode = goal
    
    arr = list()
    
    while currentNode != start:
        try:
            track_path.insert(0, currentNode)
            currentNode = track_pred[currentNode]
            
            arr.append(currentNode.get_object().UID)
            
            
        except KeyError:
            print("path is not reachable")
            break   
    
    track_path.insert(0, start) # start at the 0th index
    # print(arr)
    if shortest_distance[goal] != infinity:
        print("Shortest distance is " + str(shortest_distance[goal]))
        print("Optimal path is " + str(list(i.UID for i in track_path)))
    return track_path
      
# racks = dijkstra(g, rack6, rack26)
# for rack in racks:
#     print(rack.UID)



def get_first_last_orientations(path): # the optimal path
    
    assert len(path) > 2
    start_node = path[0] # the start node of the dijk
    next_node = path[1] # the second node visited that is next to the start 
    adj_start = start_node.adjList() # gives us tuples of [(neigbor, weight, type)]
    
    exit_orientation = None
    for neighbor, weight, type in adj_start: # has to be the correct type 
        if neighbor is next_node:
            exit_orientation = type
            break
    assert exit_orientation is not None # you must have an exit type 
    
    path_len = len(path)
    dest_node = path[path_len - 1]
    prev_node = path[path_len - 2]
    adj_dest = dest_node.adjList()
    
    entry_orientation = None
    
    for neighbor, weight, type in adj_dest:
        if neighbor is prev_node:
            entry_orientation = type
            break
    assert entry_orientation is not None
    
    return exit_orientation, entry_orientation

# print(dijkstra(g, rack1, rack12))
path1to27 = (dijkstra(g, rack1, rack27))
# # print(rack7.adjList())
print(get_first_last_orientations(path1to27))
